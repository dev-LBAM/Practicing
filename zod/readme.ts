// ## ğŸ”¹ 1. ValidaÃ§Ã£o de FormulÃ¡rios (Frontend e Backend)
// - Garantir que os usuÃ¡rios preencham os campos corretamente antes de enviar os dados.
// - Exibir mensagens de erro amigÃ¡veis para o usuÃ¡rio.
// - Evitar que dados invÃ¡lidos sejam enviados para o backend.

// ğŸ“Œ **Exemplo:**  
// ```ts
const formSchema = z.object({
  name: z.string().min(3, "Nome deve ter pelo menos 3 caracteres"),
  email: z.string().email("E-mail invÃ¡lido"),
  age: z.number().int().positive(),
});
// ```

// // ---

// // ## ğŸ”¹ 2. ValidaÃ§Ã£o de RequisiÃ§Ãµes HTTP (Backend)
// // - Validar `req.body`, `req.params` e `req.query` antes de processar a requisiÃ§Ã£o.
// // - Evitar requisiÃ§Ãµes com dados malformados ou invÃ¡lidos.

// // ğŸ“Œ **Exemplo com Express.js:**  
// // ```ts
app.post("/user", (req, res) => {
  const validation = userSchema.safeParse(req.body);
  if (!validation.success) {
    return res.status(400).json(validation.error.format());
  }
  res.status(200).send("UsuÃ¡rio vÃ¡lido");
});
``

// ## ğŸ”¹ 3. ValidaÃ§Ã£o de Respostas de API (Frontend e Backend)
// - Garantir que os dados recebidos de uma API externa estÃ£o no formato esperado.
// - Prevenir falhas ao exibir informaÃ§Ãµes no frontend devido a dados inesperados.

// ğŸ“Œ **Exemplo:**  

const apiResponseSchema = z.object({
  id: z.string(),
  name: z.string(),
  price: z.number().positive(),
});

fetch("/api/product")
  .then(res => res.json())
  .then(data => {
    const result = apiResponseSchema.safeParse(data);
    if (!result.success) {
      console.error("Erro na resposta da API", result.error);
    }
  });
``

// ## ğŸ”¹ 4. ValidaÃ§Ã£o de Dados do Banco de Dados
// - Garantir que os dados enviados ao banco estejam corretos antes de salvar.
// - Trabalhar em conjunto com **ORMS** (como Prisma, TypeORM, Sequelize).

// ğŸ“Œ **Exemplo com Prisma:**  

const userSchema = z.object({
  name: z.string().min(3),
  email: z.string().email(),
});

const userData = userSchema.parse({ name: "JoÃ£o", email: "joao@email.com" });

await prisma.user.create({ data: userData });
// ```

// ---

// ## ğŸ”¹ 5. ValidaÃ§Ã£o de ConfiguraÃ§Ã£o e VariÃ¡veis de Ambiente
// - Evitar falhas na aplicaÃ§Ã£o devido a valores ausentes ou malformados no `.env`.
// - Tipar corretamente as configuraÃ§Ãµes.

// ğŸ“Œ **Exemplo:**  
// ```ts
const configSchema = z.object({
  DATABASE_URL: z.string().url(),
  API_KEY: z.string().min(10),
});

const config = configSchema.parse(process.env);
// ```

// ---

// ## ğŸ”¹ 6. ValidaÃ§Ã£o de Dados em Fila de Processamento (RabbitMQ, Redis, BullMQ, etc.)
// - Garantir que as mensagens enviadas para filas estÃ£o corretas antes de serem processadas.

// ğŸ“Œ **Exemplo:**  
// ```ts
const orderSchema = z.object({
  orderId: z.string(),
  items: z.array(z.object({ productId: z.string(), quantity: z.number().positive() })),
});

function processOrder(message) {
  const validation = orderSchema.safeParse(message);
  if (!validation.success) {
    console.error("Erro nos dados da fila", validation.error);
    return;
  }
  console.log("Processando pedido:", validation.data);
}
// ```

// ---

// ## ğŸ”¹ 7. ValidaÃ§Ã£o de Dados de Cache (Redis, Memcached, LocalStorage)
// - Garantir que os dados armazenados e recuperados do cache estÃ£o no formato correto.

// ğŸ“Œ **Exemplo com Redis:**  
// ```ts
const sessionSchema = z.object({
  userId: z.string(),
  lastLogin: z.date(),
});

const sessionData = JSON.parse(redis.get("userSession") || "{}");

const result = sessionSchema.safeParse(sessionData);
if (!result.success) {
  console.error("Erro ao recuperar sessÃ£o", result.error);
}
// ```

// ---

// ## ğŸ”¹ 8. ValidaÃ§Ã£o de ParÃ¢metros de URL e Query String
// - Garantir que os parÃ¢metros passados na URL estejam no formato esperado.

// ğŸ“Œ **Exemplo:**  
// ```ts
const paramsSchema = z.object({
  userId: z.string().uuid(),
  page: z.string().transform(Number).int().positive(),
});

const result = paramsSchema.safeParse(req.params);
if (!result.success) {
  res.status(400).json(result.error);
}
// ```

// ---

// ## ğŸ”¹ 9. Tipagem e ValidaÃ§Ã£o de Objetos Complexos
// - Validar objetos aninhados e estruturas complexas.

// ğŸ“Œ **Exemplo:**  
// ```ts
const userSchema = z.object({
  name: z.string(),
  address: z.object({
    street: z.string(),
    city: z.string(),
    zip: z.string().length(5),
  }),
});
// ```

// ---

// ## ğŸ”¹ 10. ValidaÃ§Ã£o de WebSockets (Socket.IO, WS)
// - Garantir que os dados enviados e recebidos via WebSockets estÃ£o corretos.

// ğŸ“Œ **Exemplo:**  
// ```ts
const messageSchema = z.object({
  userId: z.string(),
  content: z.string().min(1),
});

socket.on("message", (data) => {
  const result = messageSchema.safeParse(data);
  if (!result.success) {
    console.error("Mensagem invÃ¡lida", result.error);
  }
});
// ```

// ---

// ## ğŸš€ ConclusÃ£o
// O **Zod** Ã© uma ferramenta extremamente poderosa para validar, transformar e estruturar dados, podendo ser usada **em praticamente qualquer lugar** onde vocÃª precise garantir que os dados estejam corretos. Ele pode ser aplicado em **APIs, bancos de dados, cache, filas, WebSockets, validaÃ§Ã£o de formulÃ¡rios, configuraÃ§Ã£o e muito mais**!

// Se quiser mais detalhes sobre algum desses cenÃ¡rios, estude os exemplos e pratique no seu cÃ³digo! ğŸš€ğŸ”¥

